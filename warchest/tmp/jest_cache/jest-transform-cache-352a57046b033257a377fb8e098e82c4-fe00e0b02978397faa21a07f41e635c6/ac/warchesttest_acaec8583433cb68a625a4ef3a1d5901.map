{"version":3,"names":["_getJestObj","mock","jest","require","warchest","eventBus","PrismaClient","describe","prismaMock","beforeAll","wallet","create","fn","mockResolvedValue","name","publicKey","findMany","findUnique","mockImplementation","afterEach","clearAllMocks","test","solana","createWallet","keychainRef","getPrivateKey","result","addWallet","expect","toBe","emit","toHaveBeenCalledWith"],"sources":["warchest.test.js"],"sourcesContent":["const warchest = require('../../src/core/warchest');\nconst eventBus = require('../../src/core/eventBus');\njest.mock('../../src/core/solana');\njest.mock('../../src/core/keychain');\n\nconst { PrismaClient } = require('@prisma/client');\n\ndescribe('core warchest', () => {\n  let prismaMock;\n\n  beforeAll(() => {\n    prismaMock = {\n      wallet: {\n        create: jest.fn().mockResolvedValue({ name: 'name', publicKey: 'pk' }),\n        findMany: jest.fn().mockResolvedValue([]),\n        findUnique: jest.fn().mockResolvedValue({ publicKey: 'pk' })\n      }\n    };\n    PrismaClient.mockImplementation(() => prismaMock);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('addWallet emits event and returns wallet', async () => {\n    const solana = require('../../src/core/solana');\n    solana.createWallet.mockResolvedValue({ publicKey: 'pk', keychainRef: 'ref' });\n    solana.getPrivateKey.mockResolvedValue('priv');\n    const result = await warchest.addWallet('name');\n    expect(result.publicKey).toBe('pk');\n    expect(eventBus.emit).toHaveBeenCalledWith('wallet.add', { name: 'name', publicKey: 'pk' });\n  });\n});"],"mappings":"AAEAA,WAAA,GAAKC,IAAI,CAAC,uBAAuB,CAAC;AAClCD,WAAA,GAAKC,IAAI,CAAC,yBAAyB,CAAC;AAAC,SAAAD,YAAA;EAAA;IAAAE;EAAA,IAAAC,OAAA;EAAAH,WAAA,GAAAA,CAAA,KAAAE,IAAA;EAAA,OAAAA,IAAA;AAAA;AAHrC,MAAME,QAAQ,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACnD,MAAME,QAAQ,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAInD,MAAM;EAAEG;AAAa,CAAC,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAElDI,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9B,IAAIC,UAAU;EAEdC,SAAS,CAAC,MAAM;IACdD,UAAU,GAAG;MACXE,MAAM,EAAE;QACNC,MAAM,EAAET,IAAI,CAACU,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAK,CAAC,CAAC;QACtEC,QAAQ,EAAEd,IAAI,CAACU,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC,EAAE,CAAC;QACzCI,UAAU,EAAEf,IAAI,CAACU,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;UAAEE,SAAS,EAAE;QAAK,CAAC;MAC7D;IACF,CAAC;IACDT,YAAY,CAACY,kBAAkB,CAAC,MAAMV,UAAU,CAAC;EACnD,CAAC,CAAC;EAEFW,SAAS,CAAC,MAAM;IACdjB,IAAI,CAACkB,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,IAAI,CAAC,0CAA0C,EAAE,YAAY;IAC3D,MAAMC,MAAM,GAAGnB,OAAO,CAAC,uBAAuB,CAAC;IAC/CmB,MAAM,CAACC,YAAY,CAACV,iBAAiB,CAAC;MAAEE,SAAS,EAAE,IAAI;MAAES,WAAW,EAAE;IAAM,CAAC,CAAC;IAC9EF,MAAM,CAACG,aAAa,CAACZ,iBAAiB,CAAC,MAAM,CAAC;IAC9C,MAAMa,MAAM,GAAG,MAAMtB,QAAQ,CAACuB,SAAS,CAAC,MAAM,CAAC;IAC/CC,MAAM,CAACF,MAAM,CAACX,SAAS,CAAC,CAACc,IAAI,CAAC,IAAI,CAAC;IACnCD,MAAM,CAACvB,QAAQ,CAACyB,IAAI,CAAC,CAACC,oBAAoB,CAAC,YAAY,EAAE;MAAEjB,IAAI,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;EAC7F,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}