2010e2af8124d5978f7289f9d0632069
/**
 * @module core/warchest
 * @see README.md#usage
 */

const {
  PrismaClient
} = require('@prisma/client');
const Solana = require('./solana');
const Keychain = require('./keychain');
const EventBus = require('./eventBus');
const handleError = require('./errorHandler');
const prisma = new PrismaClient();

/**
 * Add a new wallet.
 * @param {string} name - Name of the wallet.
 * @returns {Promise<object>} The created wallet record.
 */
async function addWallet(name) {
  try {
    const {
      publicKey,
      keychainRef
    } = await Solana.createWallet(name);
    const wallet = await prisma.wallet.create({
      data: {
        name,
        publicKey,
        keychainRef
      }
    });
    EventBus.emit('wallet.add', {
      name,
      publicKey
    });
    return wallet;
  } catch (error) {
    handleError(error);
  }
}

/**
 * List all wallets.
 * @returns {Promise<Array<object>>} Array of wallet records.
 */
async function listWallets() {
  try {
    return await prisma.wallet.findMany();
  } catch (error) {
    handleError(error);
  }
}

/**
 * Resync wallet data.
 * @param {string} name - Name of the wallet.
 */
async function resyncWallet(name) {
  try {
    const wallet = await prisma.wallet.findUnique({
      where: {
        name
      }
    });
    if (!wallet) throw new Error('Wallet not found');
    await Solana.scanAccounts(wallet.publicKey);
    EventBus.emit('wallet.resync', {
      name
    });
  } catch (error) {
    handleError(error);
  }
}

/**
 * Scan wallet balances.
 * @param {string} publicKey - Public key of the wallet.
 */
async function scanWallet(publicKey) {
  try {
    await Solana.scanAccounts(publicKey);
    EventBus.emit('wallet.scan', {
      publicKey
    });
  } catch (error) {
    handleError(error);
  }
}

/**
 * Calculate P&L for a wallet.
 * @param {string} name - Name of the wallet.
 * @returns {Promise<number>} The P&L value.
 */
async function calculatePnl(name) {
  try {
    const wallet = await prisma.wallet.findUnique({
      where: {
        name
      }
    });
    if (!wallet) throw new Error('Wallet not found');
    const pnl = await Solana.calculatePnl(wallet.publicKey);
    EventBus.emit('wallet.pnl', {
      name,
      pnl
    });
    return pnl;
  } catch (error) {
    handleError(error);
  }
}
module.exports = {
  addWallet,
  listWallets,
  resyncWallet,
  scanWallet,
  calculatePnl
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJyZXF1aXJlIiwiU29sYW5hIiwiS2V5Y2hhaW4iLCJFdmVudEJ1cyIsImhhbmRsZUVycm9yIiwicHJpc21hIiwiYWRkV2FsbGV0IiwibmFtZSIsInB1YmxpY0tleSIsImtleWNoYWluUmVmIiwiY3JlYXRlV2FsbGV0Iiwid2FsbGV0IiwiY3JlYXRlIiwiZGF0YSIsImVtaXQiLCJlcnJvciIsImxpc3RXYWxsZXRzIiwiZmluZE1hbnkiLCJyZXN5bmNXYWxsZXQiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJFcnJvciIsInNjYW5BY2NvdW50cyIsInNjYW5XYWxsZXQiLCJjYWxjdWxhdGVQbmwiLCJwbmwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsid2FyY2hlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIGNvcmUvd2FyY2hlc3RcbiAqIEBzZWUgUkVBRE1FLm1kI3VzYWdlXG4gKi9cblxuY29uc3QgeyBQcmlzbWFDbGllbnQgfSA9IHJlcXVpcmUoJ0BwcmlzbWEvY2xpZW50Jyk7XG5jb25zdCBTb2xhbmEgPSByZXF1aXJlKCcuL3NvbGFuYScpO1xuY29uc3QgS2V5Y2hhaW4gPSByZXF1aXJlKCcuL2tleWNoYWluJyk7XG5jb25zdCBFdmVudEJ1cyA9IHJlcXVpcmUoJy4vZXZlbnRCdXMnKTtcbmNvbnN0IGhhbmRsZUVycm9yID0gcmVxdWlyZSgnLi9lcnJvckhhbmRsZXInKTtcblxuY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xuXG4vKipcbiAqIEFkZCBhIG5ldyB3YWxsZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIHdhbGxldC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFRoZSBjcmVhdGVkIHdhbGxldCByZWNvcmQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGFkZFdhbGxldChuYW1lKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBwdWJsaWNLZXksIGtleWNoYWluUmVmIH0gPSBhd2FpdCBTb2xhbmEuY3JlYXRlV2FsbGV0KG5hbWUpO1xuICAgIGNvbnN0IHdhbGxldCA9IGF3YWl0IHByaXNtYS53YWxsZXQuY3JlYXRlKHtcbiAgICAgIGRhdGE6IHsgbmFtZSwgcHVibGljS2V5LCBrZXljaGFpblJlZiB9XG4gICAgfSk7XG4gICAgRXZlbnRCdXMuZW1pdCgnd2FsbGV0LmFkZCcsIHsgbmFtZSwgcHVibGljS2V5IH0pO1xuICAgIHJldHVybiB3YWxsZXQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogTGlzdCBhbGwgd2FsbGV0cy5cbiAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PG9iamVjdD4+fSBBcnJheSBvZiB3YWxsZXQgcmVjb3Jkcy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbGlzdFdhbGxldHMoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS53YWxsZXQuZmluZE1hbnkoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBoYW5kbGVFcnJvcihlcnJvcik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXN5bmMgd2FsbGV0IGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIHdhbGxldC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVzeW5jV2FsbGV0KG5hbWUpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB3YWxsZXQgPSBhd2FpdCBwcmlzbWEud2FsbGV0LmZpbmRVbmlxdWUoeyB3aGVyZTogeyBuYW1lIH0gfSk7XG4gICAgaWYgKCF3YWxsZXQpIHRocm93IG5ldyBFcnJvcignV2FsbGV0IG5vdCBmb3VuZCcpO1xuICAgIGF3YWl0IFNvbGFuYS5zY2FuQWNjb3VudHMod2FsbGV0LnB1YmxpY0tleSk7XG4gICAgRXZlbnRCdXMuZW1pdCgnd2FsbGV0LnJlc3luYycsIHsgbmFtZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBoYW5kbGVFcnJvcihlcnJvcik7XG4gIH1cbn1cblxuLyoqXG4gKiBTY2FuIHdhbGxldCBiYWxhbmNlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwdWJsaWNLZXkgLSBQdWJsaWMga2V5IG9mIHRoZSB3YWxsZXQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNjYW5XYWxsZXQocHVibGljS2V5KSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgU29sYW5hLnNjYW5BY2NvdW50cyhwdWJsaWNLZXkpO1xuICAgIEV2ZW50QnVzLmVtaXQoJ3dhbGxldC5zY2FuJywgeyBwdWJsaWNLZXkgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIFAmTCBmb3IgYSB3YWxsZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIHdhbGxldC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59IFRoZSBQJkwgdmFsdWUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhbGN1bGF0ZVBubChuYW1lKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgd2FsbGV0ID0gYXdhaXQgcHJpc21hLndhbGxldC5maW5kVW5pcXVlKHsgd2hlcmU6IHsgbmFtZSB9IH0pO1xuICAgIGlmICghd2FsbGV0KSB0aHJvdyBuZXcgRXJyb3IoJ1dhbGxldCBub3QgZm91bmQnKTtcbiAgICBjb25zdCBwbmwgPSBhd2FpdCBTb2xhbmEuY2FsY3VsYXRlUG5sKHdhbGxldC5wdWJsaWNLZXkpO1xuICAgIEV2ZW50QnVzLmVtaXQoJ3dhbGxldC5wbmwnLCB7IG5hbWUsIHBubCB9KTtcbiAgICByZXR1cm4gcG5sO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGhhbmRsZUVycm9yKGVycm9yKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWRkV2FsbGV0LFxuICBsaXN0V2FsbGV0cyxcbiAgcmVzeW5jV2FsbGV0LFxuICBzY2FuV2Fs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