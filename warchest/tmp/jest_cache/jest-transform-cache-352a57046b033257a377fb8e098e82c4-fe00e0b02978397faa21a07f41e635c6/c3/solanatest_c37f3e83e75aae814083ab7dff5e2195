4dc19111b5f14ed1877e9b7a62d22632
_getJestObj().mock('tweetnacl', () => ({
  sign: {
    keyPair: () => ({
      secretKey: new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8])
    })
  }
}));
_getJestObj().mock('@solana/kit', () => ({
  createKeyPairSignerFromBytes: jest.fn(async () => ({
    address: 'dummyPubKey'
  }))
}));
_getJestObj().mock('../../src/core/keychain', () => ({
  saveKey: jest.fn(),
  getKey: jest.fn()
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const solana = require('../../src/core/solana');
describe('core solana', () => {
  test('createWallet returns expected publicKey and keychainRef', async () => {
    const result = await solana.createWallet('testKey');
    expect(result).toEqual({
      publicKey: 'dummyPubKey',
      keychainRef: 'testKey'
    });
    const keychain = require('../../src/core/keychain');
    expect(keychain.saveKey).toHaveBeenCalledWith('testKey', expect.any(String));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzaWduIiwia2V5UGFpciIsInNlY3JldEtleSIsIlVpbnQ4QXJyYXkiLCJjcmVhdGVLZXlQYWlyU2lnbmVyRnJvbUJ5dGVzIiwiamVzdCIsImZuIiwiYWRkcmVzcyIsInNhdmVLZXkiLCJnZXRLZXkiLCJyZXF1aXJlIiwic29sYW5hIiwiZGVzY3JpYmUiLCJ0ZXN0IiwicmVzdWx0IiwiY3JlYXRlV2FsbGV0IiwiZXhwZWN0IiwidG9FcXVhbCIsInB1YmxpY0tleSIsImtleWNoYWluUmVmIiwia2V5Y2hhaW4iLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImFueSIsIlN0cmluZyJdLCJzb3VyY2VzIjpbInNvbGFuYS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImplc3QubW9jaygndHdlZXRuYWNsJywgKCkgPT4gKHtcbiAgc2lnbjogeyBrZXlQYWlyOiAoKSA9PiAoeyBzZWNyZXRLZXk6IG5ldyBVaW50OEFycmF5KFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4XSkgfSkgfVxufSkpO1xuamVzdC5tb2NrKCdAc29sYW5hL2tpdCcsICgpID0+ICh7XG4gIGNyZWF0ZUtleVBhaXJTaWduZXJGcm9tQnl0ZXM6IGplc3QuZm4oYXN5bmMgKCkgPT4gKHsgYWRkcmVzczogJ2R1bW15UHViS2V5JyB9KSlcbn0pKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvcmUva2V5Y2hhaW4nLCAoKSA9PiAoeyBzYXZlS2V5OiBqZXN0LmZuKCksIGdldEtleTogamVzdC5mbigpIH0pKTtcbmNvbnN0IHNvbGFuYSA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb3JlL3NvbGFuYScpO1xuXG5kZXNjcmliZSgnY29yZSBzb2xhbmEnLCAoKSA9PiB7XG4gIHRlc3QoJ2NyZWF0ZVdhbGxldCByZXR1cm5zIGV4cGVjdGVkIHB1YmxpY0tleSBhbmQga2V5Y2hhaW5SZWYnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc29sYW5hLmNyZWF0ZVdhbGxldCgndGVzdEtleScpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBwdWJsaWNLZXk6ICdkdW1teVB1YktleScsIGtleWNoYWluUmVmOiAndGVzdEtleScgfSk7XG4gICAgY29uc3Qga2V5Y2hhaW4gPSByZXF1aXJlKCcuLi8uLi9zcmMvY29yZS9rZXljaGFpbicpO1xuICAgIGV4cGVjdChrZXljaGFpbi5zYXZlS2V5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGVzdEtleScsIGV4cGVjdC5hbnkoU3RyaW5nKSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFBQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU87RUFDNUJDLElBQUksRUFBRTtJQUFFQyxPQUFPLEVBQUVBLENBQUEsTUFBTztNQUFFQyxTQUFTLEVBQUUsSUFBSUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUFFLENBQUM7RUFBRTtBQUNuRixDQUFDLENBQUMsQ0FBQztBQUNITCxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTztFQUM5QkssNEJBQTRCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLGFBQWE7SUFBRUMsT0FBTyxFQUFFO0VBQWMsQ0FBQyxDQUFDO0FBQ2hGLENBQUMsQ0FBQyxDQUFDO0FBQ0hULFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlCQUF5QixFQUFFLE9BQU87RUFBRVMsT0FBTyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQUVHLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUFDLFNBQUFSLFlBQUE7RUFBQTtJQUFBTztFQUFBLElBQUFLLE9BQUE7RUFBQVosV0FBQSxHQUFBQSxDQUFBLEtBQUFPLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDeEYsTUFBTU0sTUFBTSxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFFL0NFLFFBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTTtFQUM1QkMsSUFBSSxDQUFDLHlEQUF5RCxFQUFFLFlBQVk7SUFDMUUsTUFBTUMsTUFBTSxHQUFHLE1BQU1ILE1BQU0sQ0FBQ0ksWUFBWSxDQUFDLFNBQVMsQ0FBQztJQUNuREMsTUFBTSxDQUFDRixNQUFNLENBQUMsQ0FBQ0csT0FBTyxDQUFDO01BQUVDLFNBQVMsRUFBRSxhQUFhO01BQUVDLFdBQVcsRUFBRTtJQUFVLENBQUMsQ0FBQztJQUM1RSxNQUFNQyxRQUFRLEdBQUdWLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztJQUNuRE0sTUFBTSxDQUFDSSxRQUFRLENBQUNaLE9BQU8sQ0FBQyxDQUFDYSxvQkFBb0IsQ0FBQyxTQUFTLEVBQUVMLE1BQU0sQ0FBQ00sR0FBRyxDQUFDQyxNQUFNLENBQUMsQ0FBQztFQUM5RSxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=