d7d587b12cbaecfbd0feec5d987546e1
_getJestObj().mock('@prisma/client');
_getJestObj().mock('../../src/core/solana');
_getJestObj().mock('../../src/core/keychain');
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const {
  PrismaClient
} = require('@prisma/client');
const warchest = require('../../src/core/warchest');
const eventBus = require('../../src/core/eventBus');
jest.spyOn(eventBus, 'emit');
describe('core warchest', () => {
  let prismaMock;
  beforeAll(() => {
    prismaMock = {
      wallet: {
        create: jest.fn().mockResolvedValue({
          name: 'name',
          publicKey: 'pk'
        }),
        findMany: jest.fn().mockResolvedValue([]),
        findUnique: jest.fn().mockResolvedValue({
          publicKey: 'pk'
        })
      }
    };
    PrismaClient.mockImplementation(() => prismaMock);
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  test('addWallet emits event and returns wallet', async () => {
    const solana = require('../../src/core/solana');
    solana.createWallet.mockResolvedValue({
      publicKey: 'pk',
      keychainRef: 'ref'
    });
    solana.getPrivateKey.mockResolvedValue('priv');
    const result = await warchest.addWallet('name');
    expect(result.publicKey).toBe('pk');
    expect(eventBus.emit).toHaveBeenCalledWith('wallet.add', {
      name: 'name',
      publicKey: 'pk'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJqZXN0IiwicmVxdWlyZSIsIlByaXNtYUNsaWVudCIsIndhcmNoZXN0IiwiZXZlbnRCdXMiLCJzcHlPbiIsImRlc2NyaWJlIiwicHJpc21hTW9jayIsImJlZm9yZUFsbCIsIndhbGxldCIsImNyZWF0ZSIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJuYW1lIiwicHVibGljS2V5IiwiZmluZE1hbnkiLCJmaW5kVW5pcXVlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInRlc3QiLCJzb2xhbmEiLCJjcmVhdGVXYWxsZXQiLCJrZXljaGFpblJlZiIsImdldFByaXZhdGVLZXkiLCJyZXN1bHQiLCJhZGRXYWxsZXQiLCJleHBlY3QiLCJ0b0JlIiwiZW1pdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsid2FyY2hlc3QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJqZXN0Lm1vY2soJ0BwcmlzbWEvY2xpZW50Jyk7XG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9jb3JlL3NvbGFuYScpO1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29yZS9rZXljaGFpbicpO1xuXG5jb25zdCB7IFByaXNtYUNsaWVudCB9ID0gcmVxdWlyZSgnQHByaXNtYS9jbGllbnQnKTtcbmNvbnN0IHdhcmNoZXN0ID0gcmVxdWlyZSgnLi4vLi4vc3JjL2NvcmUvd2FyY2hlc3QnKTtcbmNvbnN0IGV2ZW50QnVzID0gcmVxdWlyZSgnLi4vLi4vc3JjL2NvcmUvZXZlbnRCdXMnKTtcbmplc3Quc3B5T24oZXZlbnRCdXMsICdlbWl0Jyk7XG5cbmRlc2NyaWJlKCdjb3JlIHdhcmNoZXN0JywgKCkgPT4ge1xuICBsZXQgcHJpc21hTW9jaztcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIHByaXNtYU1vY2sgPSB7XG4gICAgICB3YWxsZXQ6IHtcbiAgICAgICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBuYW1lOiAnbmFtZScsIHB1YmxpY0tleTogJ3BrJyB9KSxcbiAgICAgICAgZmluZE1hbnk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHB1YmxpY0tleTogJ3BrJyB9KVxuICAgICAgfVxuICAgIH07XG4gICAgUHJpc21hQ2xpZW50Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBwcmlzbWFNb2NrKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgnYWRkV2FsbGV0IGVtaXRzIGV2ZW50IGFuZCByZXR1cm5zIHdhbGxldCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzb2xhbmEgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29yZS9zb2xhbmEnKTtcbiAgICBzb2xhbmEuY3JlYXRlV2FsbGV0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgcHVibGljS2V5OiAncGsnLCBrZXljaGFpblJlZjogJ3JlZicgfSk7XG4gICAgc29sYW5hLmdldFByaXZhdGVLZXkubW9ja1Jlc29sdmVkVmFsdWUoJ3ByaXYnKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3YXJjaGVzdC5hZGRXYWxsZXQoJ25hbWUnKTtcbiAgICBleHBlY3QocmVzdWx0LnB1YmxpY0tleSkudG9CZSgncGsnKTtcbiAgICBleHBlY3QoZXZlbnRCdXMuZW1pdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3dhbGxldC5hZGQnLCB7IG5hbWU6ICduYW1lJywgcHVibGljS2V5OiAncGsnIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQzNCRCxXQUFBLEdBQUtDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztBQUNsQ0QsV0FBQSxHQUFLQyxJQUFJLENBQUMseUJBQXlCLENBQUM7QUFBQyxTQUFBRCxZQUFBO0VBQUE7SUFBQUU7RUFBQSxJQUFBQyxPQUFBO0VBQUFILFdBQUEsR0FBQUEsQ0FBQSxLQUFBRSxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBRXJDLE1BQU07RUFBRUU7QUFBYSxDQUFDLEdBQUdELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUNsRCxNQUFNRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNuRCxNQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNuREQsSUFBSSxDQUFDSyxLQUFLLENBQUNELFFBQVEsRUFBRSxNQUFNLENBQUM7QUFFNUJFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsTUFBTTtFQUM5QixJQUFJQyxVQUFVO0VBRWRDLFNBQVMsQ0FBQyxNQUFNO0lBQ2RELFVBQVUsR0FBRztNQUNYRSxNQUFNLEVBQUU7UUFDTkMsTUFBTSxFQUFFVixJQUFJLENBQUNXLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO1VBQUVDLElBQUksRUFBRSxNQUFNO1VBQUVDLFNBQVMsRUFBRTtRQUFLLENBQUMsQ0FBQztRQUN0RUMsUUFBUSxFQUFFZixJQUFJLENBQUNXLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUN6Q0ksVUFBVSxFQUFFaEIsSUFBSSxDQUFDVyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztVQUFFRSxTQUFTLEVBQUU7UUFBSyxDQUFDO01BQzdEO0lBQ0YsQ0FBQztJQUNEWixZQUFZLENBQUNlLGtCQUFrQixDQUFDLE1BQU1WLFVBQVUsQ0FBQztFQUNuRCxDQUFDLENBQUM7RUFFRlcsU0FBUyxDQUFDLE1BQU07SUFDZGxCLElBQUksQ0FBQ21CLGFBQWEsQ0FBQyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsWUFBWTtJQUMzRCxNQUFNQyxNQUFNLEdBQUdwQixPQUFPLENBQUMsdUJBQXVCLENBQUM7SUFDL0NvQixNQUFNLENBQUNDLFlBQVksQ0FBQ1YsaUJBQWlCLENBQUM7TUFBRUUsU0FBUyxFQUFFLElBQUk7TUFBRVMsV0FBVyxFQUFFO0lBQU0sQ0FBQyxDQUFDO0lBQzlFRixNQUFNLENBQUNHLGFBQWEsQ0FBQ1osaUJBQWlCLENBQUMsTUFBTSxDQUFDO0lBQzlDLE1BQU1hLE1BQU0sR0FBRyxNQUFNdEIsUUFBUSxDQUFDdUIsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUMvQ0MsTUFBTSxDQUFDRixNQUFNLENBQUNYLFNBQVMsQ0FBQyxDQUFDYyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25DRCxNQUFNLENBQUN2QixRQUFRLENBQUN5QixJQUFJLENBQUMsQ0FBQ0Msb0JBQW9CLENBQUMsWUFBWSxFQUFFO01BQUVqQixJQUFJLEVBQUUsTUFBTTtNQUFFQyxTQUFTLEVBQUU7SUFBSyxDQUFDLENBQUM7RUFDN0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119