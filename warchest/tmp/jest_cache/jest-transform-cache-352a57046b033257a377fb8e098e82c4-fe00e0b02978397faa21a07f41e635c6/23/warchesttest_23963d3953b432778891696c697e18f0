8c234bbf430ff6e2b9f316b3833f0052
_getJestObj().mock('@prisma/client');
_getJestObj().mock('../../src/core/solana');
_getJestObj().mock('../../src/core/keychain');
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const {
  PrismaClient
} = require('@prisma/client');
const warchest = require('../../src/core/warchest');
const eventBus = require('../../src/core/eventBus');
describe('core warchest', () => {
  let prismaMock;
  beforeAll(() => {
    prismaMock = {
      wallet: {
        create: jest.fn().mockResolvedValue({
          name: 'name',
          publicKey: 'pk'
        }),
        findMany: jest.fn().mockResolvedValue([]),
        findUnique: jest.fn().mockResolvedValue({
          publicKey: 'pk'
        })
      }
    };
    PrismaClient.mockImplementation(() => prismaMock);
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  test('addWallet emits event and returns wallet', async () => {
    const solana = require('../../src/core/solana');
    solana.createWallet.mockResolvedValue({
      publicKey: 'pk',
      keychainRef: 'ref'
    });
    solana.getPrivateKey.mockResolvedValue('priv');
    const result = await warchest.addWallet('name');
    expect(result.publicKey).toBe('pk');
    expect(eventBus.emit).toHaveBeenCalledWith('wallet.add', {
      name: 'name',
      publicKey: 'pk'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJqZXN0IiwicmVxdWlyZSIsIlByaXNtYUNsaWVudCIsIndhcmNoZXN0IiwiZXZlbnRCdXMiLCJkZXNjcmliZSIsInByaXNtYU1vY2siLCJiZWZvcmVBbGwiLCJ3YWxsZXQiLCJjcmVhdGUiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwibmFtZSIsInB1YmxpY0tleSIsImZpbmRNYW55IiwiZmluZFVuaXF1ZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0Iiwic29sYW5hIiwiY3JlYXRlV2FsbGV0Iiwia2V5Y2hhaW5SZWYiLCJnZXRQcml2YXRlS2V5IiwicmVzdWx0IiwiYWRkV2FsbGV0IiwiZXhwZWN0IiwidG9CZSIsImVtaXQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJzb3VyY2VzIjpbIndhcmNoZXN0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdAcHJpc21hL2NsaWVudCcpO1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29yZS9zb2xhbmEnKTtcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvcmUva2V5Y2hhaW4nKTtcblxuY29uc3QgeyBQcmlzbWFDbGllbnQgfSA9IHJlcXVpcmUoJ0BwcmlzbWEvY2xpZW50Jyk7XG5jb25zdCB3YXJjaGVzdCA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb3JlL3dhcmNoZXN0Jyk7XG5jb25zdCBldmVudEJ1cyA9IHJlcXVpcmUoJy4uLy4uL3NyYy9jb3JlL2V2ZW50QnVzJyk7XG5cbmRlc2NyaWJlKCdjb3JlIHdhcmNoZXN0JywgKCkgPT4ge1xuICBsZXQgcHJpc21hTW9jaztcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIHByaXNtYU1vY2sgPSB7XG4gICAgICB3YWxsZXQ6IHtcbiAgICAgICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBuYW1lOiAnbmFtZScsIHB1YmxpY0tleTogJ3BrJyB9KSxcbiAgICAgICAgZmluZE1hbnk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHB1YmxpY0tleTogJ3BrJyB9KVxuICAgICAgfVxuICAgIH07XG4gICAgUHJpc21hQ2xpZW50Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBwcmlzbWFNb2NrKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgdGVzdCgnYWRkV2FsbGV0IGVtaXRzIGV2ZW50IGFuZCByZXR1cm5zIHdhbGxldCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBzb2xhbmEgPSByZXF1aXJlKCcuLi8uLi9zcmMvY29yZS9zb2xhbmEnKTtcbiAgICBzb2xhbmEuY3JlYXRlV2FsbGV0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgcHVibGljS2V5OiAncGsnLCBrZXljaGFpblJlZjogJ3JlZicgfSk7XG4gICAgc29sYW5hLmdldFByaXZhdGVLZXkubW9ja1Jlc29sdmVkVmFsdWUoJ3ByaXYnKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3YXJjaGVzdC5hZGRXYWxsZXQoJ25hbWUnKTtcbiAgICBleHBlY3QocmVzdWx0LnB1YmxpY0tleSkudG9CZSgncGsnKTtcbiAgICBleHBlY3QoZXZlbnRCdXMuZW1pdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3dhbGxldC5hZGQnLCB7IG5hbWU6ICduYW1lJywgcHVibGljS2V5OiAncGsnIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQzNCRCxXQUFBLEdBQUtDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztBQUNsQ0QsV0FBQSxHQUFLQyxJQUFJLENBQUMseUJBQXlCLENBQUM7QUFBQyxTQUFBRCxZQUFBO0VBQUE7SUFBQUU7RUFBQSxJQUFBQyxPQUFBO0VBQUFILFdBQUEsR0FBQUEsQ0FBQSxLQUFBRSxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBRXJDLE1BQU07RUFBRUU7QUFBYSxDQUFDLEdBQUdELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUNsRCxNQUFNRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNuRCxNQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUVuREksUUFBUSxDQUFDLGVBQWUsRUFBRSxNQUFNO0VBQzlCLElBQUlDLFVBQVU7RUFFZEMsU0FBUyxDQUFDLE1BQU07SUFDZEQsVUFBVSxHQUFHO01BQ1hFLE1BQU0sRUFBRTtRQUNOQyxNQUFNLEVBQUVULElBQUksQ0FBQ1UsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7VUFBRUMsSUFBSSxFQUFFLE1BQU07VUFBRUMsU0FBUyxFQUFFO1FBQUssQ0FBQyxDQUFDO1FBQ3RFQyxRQUFRLEVBQUVkLElBQUksQ0FBQ1UsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1FBQ3pDSSxVQUFVLEVBQUVmLElBQUksQ0FBQ1UsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7VUFBRUUsU0FBUyxFQUFFO1FBQUssQ0FBQztNQUM3RDtJQUNGLENBQUM7SUFDRFgsWUFBWSxDQUFDYyxrQkFBa0IsQ0FBQyxNQUFNVixVQUFVLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0VBRUZXLFNBQVMsQ0FBQyxNQUFNO0lBQ2RqQixJQUFJLENBQUNrQixhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLFlBQVk7SUFDM0QsTUFBTUMsTUFBTSxHQUFHbkIsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0lBQy9DbUIsTUFBTSxDQUFDQyxZQUFZLENBQUNWLGlCQUFpQixDQUFDO01BQUVFLFNBQVMsRUFBRSxJQUFJO01BQUVTLFdBQVcsRUFBRTtJQUFNLENBQUMsQ0FBQztJQUM5RUYsTUFBTSxDQUFDRyxhQUFhLENBQUNaLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztJQUM5QyxNQUFNYSxNQUFNLEdBQUcsTUFBTXJCLFFBQVEsQ0FBQ3NCLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDL0NDLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDWCxTQUFTLENBQUMsQ0FBQ2MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQ0QsTUFBTSxDQUFDdEIsUUFBUSxDQUFDd0IsSUFBSSxDQUFDLENBQUNDLG9CQUFvQixDQUFDLFlBQVksRUFBRTtNQUFFakIsSUFBSSxFQUFFLE1BQU07TUFBRUMsU0FBUyxFQUFFO0lBQUssQ0FBQyxDQUFDO0VBQzdGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==