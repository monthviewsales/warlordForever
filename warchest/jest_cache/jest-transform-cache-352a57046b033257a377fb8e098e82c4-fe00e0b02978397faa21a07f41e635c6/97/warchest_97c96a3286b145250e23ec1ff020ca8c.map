{"version":3,"names":["PrismaClient","require","Solana","Keychain","EventBus","handleError","prisma","addWallet","name","publicKey","keychainRef","createWallet","wallet","create","data","emit","error","listWallets","findMany","resyncWallet","findUnique","where","Error","scanAccounts","scanWallet","calculatePnl","pnl","module","exports"],"sources":["warchest.js"],"sourcesContent":["/**\n * @module core/warchest\n * @see README.md#usage\n */\n\nconst { PrismaClient } = require('@prisma/client');\nconst Solana = require('./solana');\nconst Keychain = require('./keychain');\nconst EventBus = require('./eventBus');\nconst handleError = require('./errorHandler');\n\nconst prisma = new PrismaClient();\n\n/**\n * Add a new wallet.\n * @param {string} name - Name of the wallet.\n * @returns {Promise<object>} The created wallet record.\n */\nasync function addWallet(name) {\n  try {\n    const { publicKey, keychainRef } = await Solana.createWallet(name);\n    const wallet = await prisma.wallet.create({\n      data: { name, publicKey, keychainRef }\n    });\n    EventBus.emit('wallet.add', { name, publicKey });\n    return wallet;\n  } catch (error) {\n    handleError(error);\n  }\n}\n\n/**\n * List all wallets.\n * @returns {Promise<Array<object>>} Array of wallet records.\n */\nasync function listWallets() {\n  try {\n    return await prisma.wallet.findMany();\n  } catch (error) {\n    handleError(error);\n  }\n}\n\n/**\n * Resync wallet data.\n * @param {string} name - Name of the wallet.\n */\nasync function resyncWallet(name) {\n  try {\n    const wallet = await prisma.wallet.findUnique({ where: { name } });\n    if (!wallet) throw new Error('Wallet not found');\n    await Solana.scanAccounts(wallet.publicKey);\n    EventBus.emit('wallet.resync', { name });\n  } catch (error) {\n    handleError(error);\n  }\n}\n\n/**\n * Scan wallet balances.\n * @param {string} publicKey - Public key of the wallet.\n */\nasync function scanWallet(publicKey) {\n  try {\n    await Solana.scanAccounts(publicKey);\n    EventBus.emit('wallet.scan', { publicKey });\n  } catch (error) {\n    handleError(error);\n  }\n}\n\n/**\n * Calculate P&L for a wallet.\n * @param {string} name - Name of the wallet.\n * @returns {Promise<number>} The P&L value.\n */\nasync function calculatePnl(name) {\n  try {\n    const wallet = await prisma.wallet.findUnique({ where: { name } });\n    if (!wallet) throw new Error('Wallet not found');\n    const pnl = await Solana.calculatePnl(wallet.publicKey);\n    EventBus.emit('wallet.pnl', { name, pnl });\n    return pnl;\n  } catch (error) {\n    handleError(error);\n  }\n}\n\nmodule.exports = {\n  addWallet,\n  listWallets,\n  resyncWallet,\n  scanWallet,\n  calculatePnl\n};"],"mappings":"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","ignoreList":[]}